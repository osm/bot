{
	"db": {
		// Path to the SQLite3 database file.
		"path": "./bot.db",

		// A generic error message that will be written to the IRC
		// channel if there's a problem with the database.
		"err": "database error"
	},
	"http": {
		// Set to true to enable the HTTP server.
		"enableHTTP": true,

		// Which address and port to listen on.
		"address": "",
		"port": "8080",

		// Toggle the echo route, if set a HTTP endpoint will be
		// activated that will pass the POST data back to the IRC
		// channel.
		"enableEcho": true,
		"echoRoute": "/echo",
		"echoMethod": "POST"
	},
	"irc": {
		// Basic IRC settings.
		"address": "localhost:6667",
		"channel": "#bot",
		"nick": "bot",
		"realName": "bot",
		"user": "bot",
		"version": "bot",

		// The grace period defines how many milliseconds to wait
		// until a message is sent, think of this as a flood
		// protection thingy, it will default to 750 if set to 0 or if
		// it's empty.
		"gracePeriod": 750,

		// An array of user hosts that should be given op as soon as
		// they join the channel. Each entry is compiled into a
		// regexp.
		"operators": [
			"~osm@127.0.0.1"
		],

		// An array of user hosts to ignore messages from. Each entry
		// is compiled into a regexp.
		"ignore": [
		],

		// Lyssnar - A lyssnar.com integration.
		// Checkout lyssnar.com and github.com/osm/lyssnar
		//
		// Commands:
		// !lyssnar <nick>
		// Returns what <nick> is currently listening to on Spotify.
		//
		// Placeholders for lyssnarMsg:
		// <nick> - Nick of the user that is listening to something.
		// <song> - Current song that <nick> is listening to.
		"enableLyssnar": true,
		"lyssnarCmd": "!lyssnar",
		"lyssnarErr": "there's something wrong with the lyssnar.com integration",
		"lyssnarErrUserNotConfigured": "the user is not configured",
		"lyssnarMsg": "<nick> listening to <song>",
		"lyssnarMsgUserIsNotListening": "the user is not listening to anything right now",
		"lyssnare": {
			"osm": "osclin"
		},

		// Toggle the giphy.com integration.
		// You will need to acquire your own API to use this feature.
		"enableGiphy": true,
		"giphyCmd": "!giphy",
		"giphyLang": "en",
		"giphyAPIKey": "",
		"giphyMsgNothingFound": "nothing found",

		// Toggle the tenor.com integration.
		// You will need to acquire your own API to use this feature.
		"enableTenor": true,
		"tenorCmd": "!tenor",
		"tenorLang": "en_US",
		"tenorAPIKey": "",
		"tenorMsgNothingFound": "nothing found",

		// Enable cron jobs.
		"enableCron": true,

		// Command and sub commands for the cron integration.
		// To interact with the cron engine you would first need to
		// send the cmd defined in cronCmd, followed by a sub command
		// and possibly more parameters, if needed.
		//
		// Examples
		//
		// Add:
		// Say hello, world at minute 0 every hour.
		// !cron add 0 * * * * hello, world
		//
		// Say "hello, world" every minute but with the limit set to
		// 5, which means that the job only will be repeated 5 times.
		// !cron add * * * * * limit:5 hello, world <exec_count>/<exec_limit>
		//
		// List:
		// !cron list
		//
		// Delete:
		// !cron delete 5efeeae8-1fb3-48b1-9dd9-a7e83a8d6c2e
		//
		// Update:
		// !cron update 5efeeae8-1fb3-48b1-9dd9-a7e83a8d6c2e 15 * * * * world, hello
		"cronCmd": "!cron",
		"cronSubCmdAdd": "add",
		// A special word that will be used to define how many times
		// the cron job should be repeated.
		// Example: !cron add * * * * * limit:5 hello, world
		"cronSubCmdAddLimit": "limit",
		"cronSubCmdDelete": "delete",
		"cronSubCmdList": "list",
		"cronSubCmdUpdate": "update",

		// Messages send when one of the cron sub commands has
		// completed.
		"cronErr": "check your syntax",
		"cronMsgAdd": "cron job added, next execution is <next_execution>",
		"cronMsgDelete": "cron job deleted",
		"cronMsgList": "id: <id> expression: <expression> message: <message> limited: <is_limited> count: <exec_count>/<exec_limit>, next: <next_execution>",

		"cronMsgUpdate": "cron job updated",

		// Grammar
		// The grammar is used to construct the message that is
		// trigged by the crob job.
		"cronGrammarMsgIsLimited": "<is_limited>",
		"cronGrammarMsgExecCount": "<exec_count>",
		"cronGrammarMsgExecLimit": "<exec_limit>",

		// <random_who> will be replaced with a random name from the
		// channel.
		"cronGrammarMsgRandomWho": "<random_who>",

		// The <giphy> tag will be replaced with a random giphy on
		// execution.
		"cronGrammarGiphy": "<giphy>",

		// The <giphy search="foo"> will search for the query given in
		// search and replaced with the returned url.
		"cronGrammarGiphySearch": "<giphy search=\"([a-zåäöA-ZÅÄÖ0-9 ]+)\"[^>]*>",
		"cronGrammarTenorSearch": "<tenor search=\"([a-zåäöüA-ZÅÄÖÜ0-9 ]+)\"[^>]*>",

		// Enable logging of all received IRC messages.
		"enableLogging": true,

		// Chattistik - Chat statistics.
		//
		// Commands:
		// !chattistik today
		// Display chat statistics for the current day.
		//
		// !chattistik yesterday
		// Display chat statistics for the previous day.
		//
		// !chattistik 2019-07-07
		// Display chat statistics for the given date.
		"enableChattistik": true,
		"chattistikCmd": "!chattistik",
		"chattistikCmdToday": "today",
		"chattistikCmdYesterday": "yesterday",

		// URL check.
		// if an URL has been written to the channel before it will
		// respond with a message saying who and when the URL was
		// first seen.
		//
		// Placeholders for urlCheckMsg:
		// <nick> - The nick that paste the URL for the first time.
		// <url> - The URL.
		// <timestamp> - Timestamp for when the URL was first seen.
		"enableURLCheck": true,
		"urlCheckMsg": "LOL, <nick> posted <url> on <timestamp>",

		// Command.
		// Execute commands on the host system.
		// The commands that are defined inside commands will accept
		// input from the IRC channel.
		// The commands in commandsStatic will ignore all input from
		// the IRC channel and just execute the command as it is
		// defined in the configuration file.
		"enableCommands": true,
		"commands": {
			"!echo": "echo"
		},
		"commandsStatic": {
			"!echo-static": "echo static"
		},
		"commandErrExec": "command execution error",

		// Weather - Display weather from openweathermap.org
		// You need to obtain an API key to use this feature, that can
		// be done by visiting https://openweathermap.org
		//
		// Commands:
		// !w <city>
		// Displays weather for the given city.
		//
		// Placeholders for weatherMsg:
		// <city> - The city that weather was requested for.
		// <main> - The main weather description for the city.
		// <description> - Extended weather description.
		// <temp> - Temperature for the given city.
		"enableWeather": true,
		"weatherCmd": "!w",
		"weatherErr": "unknown city",
		"weatherAPIKey": "",
		"weatherMsg": "<city>, <main>, <description>: <temp>",

		// Factoid.
		// Listens to all messages that the channel receives, if
		// there's a message that matches the <trigger> a <reply> is
		// written to the channel.
		//
		// Commands:
		// !factoid add <trigger sentence> <factoidCmdAddDelimiter> <reply>
		// Add a new factoid.
		//
		// !factoid forget <uuid>
		// Forget a factoid with the given uuid.
		//
		// !factoid snoop <trigger sentence>
		// Fetch information about the given factoid.
		//
		// !factoid count <trigger sentence>
		// Return number of factoids for the given trigger sentence.
		//
		// Placeholders for factoids:
		// <reply> writes the reply as <bot> foo
		// <action> writes the reply as /me foo
		// <who> is replaced by the nick that triggered the factoid
		// <randomwho> is replaced by a random nick from the channel
		"enableFactoid": true,

		// A random number between 1 and 100 will be generated each
		// time a factoid is triggered, if this value is set it will
		// also make sure that the random number is greater than the
		// generated number before it is sent to the channel.
		"factoidRate": 50,

		// To add a factoid you need to write a message looking
		// somewhat like this:
		// !factoid add your trigger word _is_ what the bot should
		// reply All words up until the text specified in the delimiter
		// is considered to be the trigger word and all text after the
		// delimiter is the reply.
		"factoidCmd": "!factoid",
		"factoidSubCmdAdd": "add",
		"factoidSubCmdAddDelimiter": " _is_ ",

		// To delete a factoid you will invoke the command that is
		// define here followed by the UUID of the factoid.
		"factoidSubCmdDelete": "forget",

		// To snoop, you invoke the command defined below followed by
		// the trigger word or sentence.
		"factoidSubCmdSnoop": "snoop",

		// Count how many facts there are for a given trigger
		// sentence.
		"factoidSubCmdCount": "count",

		// Defines the grammar for the placeholders that the factoids
		// are allowed to use.
		"factoidGrammarAction": "<action>",
		"factoidGrammarRandomWho": "<randomwho>",
		"factoidGrammarReply": "<reply>",
		"factoidGrammarWho": "<who>",
		// The <giphy> tag will be replaced with a random giphy on
		// execution.
		"factoidGrammarGiphy": "<giphy>",

		// The <giphy search="foo"> will search for the query given in
		// search and replaced with the returned url.
		"factoidGrammarGiphySearch": "<giphy search=\"([a-zåäöA-ZÅÄÖ0-9 ]+)\"[^>]*>",

		// The <tenor search="foo"> will search for the query given in
		// search and replaced with the returned url.
		"factoidGrammarTenorSearch": "<tenor search=\"([a-zåäöüA-ZÅÄÖÜ0-9 ]+)\"[^>]*>",

		// Static factoid messages.
		"factoidMsgAdd": "noted",
		"factoidMsgDelete": "*removed*",
		"factoidMsgIs": "is",

		// This message has it own set of placeholders and they are
		// not configurable, since they don't need to be.
		"factoidMsgSnoop": "<id>: <author> taught me that <trigger> is <reply> <timestamp>",

		// This message does also have two specific placeholders, one
		// for the trigger sentence the is checked and one for the
		// numer of occurrences it has.
		"factoidMsgCount": "<trigger> has <count> occurrences",

		// The pastebin API key is needed when snooping factoids or
		// listing cron entries that has 5 or more entries, if so, the
		// results are created on pastebin and the URL for the results
		// is written to the channel. You can signup for a free account
		// at pastebin.com to use this feature.
		"pastebinApiKey": ""
	}
}
